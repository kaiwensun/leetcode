class Solution(object):
    def minMalwareSpread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """
            
        candidate = (initial[0], -1)
        initial = set(initial)
        useless = set()
        for removed in initial:
            initial.remove(removed)
            if removed in useless:
                saved = -1
            else:
                saved = self.dfs(removed, graph, set(), initial, useless)
            initial.add(removed)
            if saved == -1:
                saved = 0
            if saved > candidate[1]:
                candidate = removed, saved
            elif saved == candidate[1]:
                candidate = min(candidate[0], removed), saved
        return candidate[0]
        
            
            
    def dfs(self, start, graph, visited, initial, useless):
        if start in useless:
            return -1
        if start in initial:
            useless.add(start)
            return -1
        if start in visited:
            return 0
        visited.add(start)
        total_saved = 1
        for neighbor in xrange(len(graph[start])):
            if neighbor == start or graph[start][neighbor] == 0:
                continue
            saved = self.dfs(neighbor, graph, visited, initial, useless)
            if saved == -1:
                useless.add(start)
                return -1
            total_saved += saved
        return total_saved


